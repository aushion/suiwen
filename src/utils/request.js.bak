/**
 * request 网络请求工具
 * 更详细的 api 文档: https://github.com/umijs/umi-request
 */
import Request, { extend } from 'umi-request';
import { notification } from 'antd';

let requestUrl;
let requestOption;

const CancelToken = Request.CancelToken;
const { token, cancel } = CancelToken.source();

let xToken;

const codeMessage = {
  200: '服务器成功返回请求的数据。',
  201: '新建或修改数据成功。',
  202: '一个请求已经进入后台排队（异步任务）。',
  204: '删除数据成功。',
  400: '发出的请求有错误，服务器没有进行新建或修改数据的操作。',
  401: '用户没有权限（令牌、用户名、密码错误）。',
  403: '用户得到授权，但是访问是被禁止的。',
  404: '发出的请求针对的是不存在的记录，服务器没有进行操作。',
  406: '请求的格式不可得。',
  410: '请求的资源被永久删除，且不会再得到的。',
  422: '当创建一个对象时，发生一个验证错误。',
  500: '服务器发生错误，请检查服务器。',
  502: '网关错误。',
  503: '服务不可用，服务器暂时过载或维护。',
  504: '网关超时。',
};

/**
 * 异常处理程序
 */

const errorHandler = error => {
  const { response = {} } = error;
  const errortext = codeMessage[response.status] || response.statusText;
  const { status, url } = response;

  notification.error({
    message: `请求错误 ${status}: ${url}`,
    description: errortext,
  });
};

/**
 * 配置request请求时的默认参数
 */
const request = extend({
  errorHandler, // 默认错误处理
  // credentials: 'include', // 默认请求是否带上cookie
});

// request拦截器, 改变url 或 options.
request.interceptors.request.use((url, options) => {
  if (!url.includes('getToke')) {
    requestUrl = url;
    requestOption = options;
  }
  return {
    url: `${url}`,
    options: {
      ...options,
      headers: {
        'X-Token': xToken,
      },
      cancelToken: token,
    },
  };
});

let obj;
let timer;

// response拦截器, 处理response
request.interceptors.response.use((response, options) => {
  xToken = response.headers.get('X-Token');
  // if(token){  // getToken
  //   return request(requestUrl, requestOption)
  // }

  response
    .clone()
    .json()
    .then(res => {
      if (res.code === 401) {
         refreshToken().then(res => {
          console.log(78, res);
          obj = request(requestUrl, requestOption);
        });
      } else {
        obj = response;
      }
    });

  // timer = setInterval(() => {
  //   console.log(123)
  //   console.log(obj)
  //   if(obj)
  //     clearInterval(timer)
  //   console.log(456)
  // }, 200);

  if (!obj) {
    console.log(1);
    // timer = setInterval(() => {
    //   console.log(123);
    //   console.log(obj);
    //   if (obj)
    //    clearInterval(timer);
    //   console.log(456);
    // }, 200);
    return response;
  } else {
    console.log(2);
    return obj;
  }

  // return response
});

function refreshToken() {
  return request.post('http://192.168.103.25:8080/qa.api/getToken', {
    data: {
      appId: '421c0d4b546f48d387b44f1eb040bdff',
      secret: '8b385d3cc269a1af02c37fa78eec18bd28778118',
    },
  });
}
export default request;
